{{#operations}}//
// {{classname}}.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import FunNet
import LUX
import LithoOperators

{{#description}}
/** {{description}} */{{/description}}
{{#operation}}
{{#allParams}}
{{#isEnum}}
/**
 * enum for parameter {{paramName}}
 */
{{#nonPublicApi}}internal{{/nonPublicApi}}{{^nonPublicApi}}public{{/nonPublicApi}} enum {{enumName}}_{{operationId}}: {{^isContainer}}{{{dataType}}}{{/isContainer}}{{#isContainer}}String{{/isContainer}}, CaseIterable {
    {{#allowableValues}}
    {{#enumVars}}
    case {{name}} = {{{value}}}
    {{/enumVars}}
    {{/allowableValues}}
}

{{/isEnum}}
{{/allParams}}

/**
 {{#summary}}
 {{{summary}}}
 {{/summary}}
 - {{httpMethod}} {{{path}}}{{#notes}}
 - {{{notes}}}{{/notes}}{{#subresourceOperation}}
 - subresourceOperation: {{subresourceOperation}}{{/subresourceOperation}}{{#defaultResponse}}
 - defaultResponse: {{defaultResponse}}{{/defaultResponse}}
 {{#authMethods}}
 - {{#isBasic}}BASIC{{/isBasic}}{{#isOAuth}}OAuth{{/isOAuth}}{{#isApiKey}}API Key{{/isApiKey}}:
   - type: {{type}}{{#keyParamName}} {{keyParamName}} {{#isKeyInQuery}}(QUERY){{/isKeyInQuery}}{{#isKeyInHeaer}}(HEADER){{/isKeyInHeaer}}{{/keyParamName}}
   - name: {{name}}
   {{/authMethods}}
 {{#hasResponseHeaders}}
 - responseHeaders: [{{#responseHeaders}}{{{baseName}}}({{{dataType}}}){{^-last}}, {{/-last}}{{/responseHeaders}}]
 {{/hasResponseHeaders}}
 {{#externalDocs}}
 - externalDocs: {{externalDocs}}
 {{/externalDocs}}
 {{#allParams}}
 - parameter {{paramName}}: ({{#isFormParam}}form{{/isFormParam}}{{#isQueryParam}}query{{/isQueryParam}}{{#isPathParam}}path{{/isPathParam}}{{#isHeaderParam}}header{{/isHeaderParam}}{{#isBodyParam}}body{{/isBodyParam}}) {{description}} {{^required}}(optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}
 {{/allParams}}
 - returns: Endpoint {{description}}
 */
{{#nonPublicApi}}internal{{/nonPublicApi}}{{^nonPublicApi}}public{{/nonPublicApi}} func {{operationId}}Endpoint({{#allParams}}{{paramName}}: {{#isEnum}}{{#isContainer}}{{{dataType}}}{{/isContainer}}{{^isContainer}}{{{datatypeWithEnum}}}_{{operationId}}{{/isContainer}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{/isEnum}}{{^required}}? = nil{{/required}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) -> Endpoint {
    {{^pathParams}}let{{/pathParams}}{{#pathParams}}{{^secondaryParam}}var{{/secondaryParam}}{{/pathParams}} path = "{{{path}}}"{{#pathParams}}
    let {{paramName}}PreEscape = "\({{#isEnum}}{{paramName}}{{#isContainer}}{{{dataType}}}{{/isContainer}}{{^isContainer}}.rawValue{{/isContainer}}{{/isEnum}}{{^isEnum}}{{paramName}}{{/isEnum}})"
    let {{paramName}}PostEscape = {{paramName}}PreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    path = path.replacingOccurrences(of: "{{=<% %>=}}{<%baseName%>}<%={{ }}=%>", with: {{paramName}}PostEscape, options: .literal, range: nil){{/pathParams}}

    var endpoint = Endpoint()
    endpoint.path = path
    endpoint /> setTo{{httpMethod}}
    endpoint /> addJsonHeaders{{#authMethods}}{{#isApiKey}}
    endpoint /> authorize{{/isApiKey}}{{/authMethods}}{{#bodyParam}}
    endpoint /> dataSetter(from: body){{/bodyParam}}{{#hasQueryParams}}
    {{#queryParams}}if let {{paramName}} = {{paramName}} {
        endpoint.addGetParams(params: [{{> _param}}])
    }
    {{/queryParams}}{{/hasQueryParams}}{{#headerParams}}{{^secondaryParam}}
    let nillableHeaders: [String: Any?] = [{{/secondaryParam}}
        {{> _param}}{{#hasMore}},{{/hasMore}}{{^hasMore}}
    ]
    let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders){{/hasMore}}{{/headerParams}}

    return endpoint
}
{{/operation}}
{{/operations}}
